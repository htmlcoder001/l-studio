(function($,undefined){var fieldGroupManager=new acf.Model({id:"fieldGroupManager",events:{"submit #post":"onSubmit",'click a[href="#"]':"onClick","click .submitdelete":"onClickTrash"},filters:{find_fields_args:"filterFindFieldArgs"},onSubmit:function(e,$el){var $title=$("#titlewrap #title");if(!$title.val()){e.preventDefault();acf.unlockForm($el);alert(acf.__("Field group title is required"));$title.focus()}},onClick:function(e){e.preventDefault()},onClickTrash:function(e){var result=confirm(acf.__("Move to trash. Are you sure?"));if(!result){e.preventDefault()}},filterFindFieldArgs:function(args){args.visible=true;return args}});var screenOptionsManager=new acf.Model({id:"screenOptionsManager",wait:"prepare",events:{change:"onChange"},initialize:function(){var $div=$("#adv-settings");var $append=$("#acf-append-show-on-screen");$div.find(".metabox-prefs").append($append.html());$div.find(".metabox-prefs br").remove();$append.remove();this.$el=$("#acf-field-key-hide");this.render()},isChecked:function(){return this.$el.prop("checked")},onChange:function(e,$el){var val=this.isChecked()?1:0;acf.updateUserSetting("show_field_keys",val);this.render()},render:function(){if(this.isChecked()){$("#acf-field-group-fields").addClass("show-field-keys")}else{$("#acf-field-group-fields").removeClass("show-field-keys")}}});var appendFieldManager=new acf.Model({actions:{new_field:"onNewField"},onNewField:function(field){if(!field.has("append"))return;var append=field.get("append");var $sibling=field.$el.siblings('[data-name="'+append+'"]').first();if(!$sibling.length)return;var $div=$sibling.children(".acf-input");var $ul=$div.children("ul");if(!$ul.length){$div.wrapInner('<ul class="acf-hl"><li></li></ul>');$ul=$div.children("ul")}var html=field.$(".acf-input").html();var $li=$("<li>"+html+"</li>");$ul.append($li);$ul.attr("data-cols",$ul.children().length);field.remove()}})})(jQuery);(function($,undefined){acf.FieldObject=acf.Model.extend({eventScope:".acf-field-object",events:{"click .edit-field":"onClickEdit","click .delete-field":"onClickDelete","click .duplicate-field":"duplicate","click .move-field":"move","change .field-type":"onChangeType","change .field-required":"onChangeRequired","blur .field-label":"onChangeLabel","blur .field-name":"onChangeName",change:"onChange",changed:"onChanged"},data:{id:0,key:"",type:""},setup:function($field){this.$el=$field;this.inherit($field);this.prop("ID");this.prop("parent");this.prop("menu_order")},$input:function(name){return $("#"+this.getInputId()+"-"+name)},$meta:function(){return this.$(".meta:first")},$handle:function(){return this.$(".handle:first")},$settings:function(){return this.$(".settings:first")},$setting:function(name){return this.$(".acf-field-settings:first > .acf-field-setting-"+name)},getParent:function(){return acf.getFieldObjects({child:this.$el,limit:1}).pop()},getParents:function(){return acf.getFieldObjects({child:this.$el})},getFields:function(){return acf.getFieldObjects({parent:this.$el})},getInputName:function(){return"acf_fields["+this.get("id")+"]"},getInputId:function(){return"acf_fields-"+this.get("id")},newInput:function(name,value){var inputId=this.getInputId();var inputName=this.getInputName();if(name){inputId+="-"+name;inputName+="["+name+"]"}var $input=$("<input />").attr({id:inputId,name:inputName,value:value});this.$("> .meta").append($input);return $input},getProp:function(name){if(this.has(name)){return this.get(name)}var $input=this.$input(name);var value=$input.length?$input.val():null;this.set(name,value,true);return value},setProp:function(name,value){var $input=this.$input(name);var prevVal=$input.val();if(!$input.length){$input=this.newInput(name,value)}if(value===null){$input.remove()}else{$input.val(value)}if(!this.has(name)){this.set(name,value,true)}else{this.set(name,value)}return this},prop:function(name,value){if(value!==undefined){return this.setProp(name,value)}else{return this.getProp(name)}},props:function(props){Object.keys(props).map(function(key){this.setProp(key,props[key])},this)},getLabel:function(){var label=this.prop("label");if(label===""){label=acf.__("(no label)")}return label},getName:function(){return this.prop("name")},getType:function(){return this.prop("type")},getTypeLabel:function(){var type=this.prop("type");var types=acf.get("fieldTypes");return types[type]?types[type].label:type},getKey:function(){return this.prop("key")},initialize:function(){},render:function(){var $handle=this.$(".handle:first");var menu_order=this.prop("menu_order");var label=this.getLabel();var name=this.prop("name");var type=this.getTypeLabel();var key=this.prop("key");var required=this.$input("required").prop("checked");$handle.find(".acf-icon").html(parseInt(menu_order)+1);if(required){label+=' <span class="acf-required">*</span>'}$handle.find(".li-field-label strong a").html(label);$handle.find(".li-field-name").text(name);$handle.find(".li-field-type").text(type);$handle.find(".li-field-key").text(key);acf.doAction("render_field_object",this)},refresh:function(){acf.doAction("refresh_field_object",this)},isOpen:function(){return this.$el.hasClass("open")},onClickEdit:function(e){this.isOpen()?this.close():this.open()},open:function(){var $settings=this.$el.children(".settings");$settings.slideDown();this.$el.addClass("open");acf.doAction("open_field_object",this);this.trigger("openFieldObject");acf.doAction("show",$settings)},close:function(){var $settings=this.$el.children(".settings");$settings.slideUp();this.$el.removeClass("open");acf.doAction("close_field_object",this);this.trigger("closeFieldObject");acf.doAction("hide",$settings)},serialize:function(){return acf.serialize(this.$el,this.getInputName())},save:function(type){type=type||"settings";var save=this.getProp("save");if(save==="settings"){return}this.setProp("save",type);this.$el.attr("data-save",type);acf.doAction("save_field_object",this,type)},submit:function(){var inputName=this.getInputName();var save=this.get("save");if(this.isOpen()){this.close()}if(save=="settings"){}else if(save=="meta"){this.$('> .settings [name^="'+inputName+'"]').remove()}else{this.$('[name^="'+inputName+'"]').remove()}acf.doAction("submit_field_object",this)},onChange:function(e,$el){this.save();acf.doAction("change_field_object",this)},onChanged:function(e,$el,name,value){if(name=="save"){return}if(["menu_order","parent"].indexOf(name)>-1){this.save("meta")}else{this.save()}if(["menu_order","label","required","name","type","key"].indexOf(name)>-1){this.render()}acf.doAction("change_field_object_"+name,this,value)},onChangeLabel:function(e,$el){var label=$el.val();this.set("label",label);if(this.prop("name")==""){var name=acf.applyFilters("generate_field_object_name",acf.strSanitize(label),this);this.prop("name",name)}},onChangeName:function(e,$el){var name=$el.val();this.set("name",name);if(name.substr(0,6)==="field_"){alert(acf.__('The string "field_" may not be used at the start of a field name'))}},onChangeRequired:function(e,$el){var required=$el.prop("checked")?1:0;this.set("required",required)},delete:function(args){args=acf.parseArgs(args,{animate:true});var id=this.prop("ID");if(id){var $input=$("#_acf_delete_fields");var newVal=$input.val()+"|"+id;$input.val(newVal)}acf.doAction("delete_field_object",this);if(args.animate){this.removeAnimate()}else{this.remove()}},onClickDelete:function(e,$el){if(e.shiftKey){return this.delete()}this.$el.addClass("-hover");var tooltip=acf.newTooltip({confirmRemove:true,target:$el,context:this,confirm:function(){this.delete()},cancel:function(){this.$el.removeClass("-hover")}})},removeAnimate:function(){var field=this;var $list=this.$el.parent();var $fields=acf.findFieldObjects({sibling:this.$el});acf.remove({target:this.$el,endHeight:$fields.length?0:50,complete:function(){field.remove();acf.doAction("removed_field_object",field,$list)}});acf.doAction("remove_field_object",field,$list)},duplicate:function(){var newKey=acf.uniqid("field_");var $newField=acf.duplicate({target:this.$el,search:this.get("id"),replace:newKey});$newField.attr("data-key",newKey);var newField=acf.getFieldObject($newField);if(this.isOpen()){this.close()}else{newField.open()}var $label=newField.$setting("label input");setTimeout(function(){$label.focus()},251);var label=newField.prop("label");var name=newField.prop("name");var end=name.split("_").pop();var copy=acf.__("copy");if(acf.isNumeric(end)){var i=end*1+1;label=label.replace(end,i);name=name.replace(end,i)}else if(end.indexOf(copy)===0){var i=end.replace(copy,"")*1;i=i?i+1:2;label=label.replace(end,copy+i);name=name.replace(end,copy+i)}else{label+=" ("+copy+")";name+="_"+copy}newField.prop("ID",0);newField.prop("label",label);newField.prop("name",name);newField.prop("key",newKey);acf.doAction("duplicate_field_object",this,newField);acf.doAction("append_field_object",newField)},wipe:function(){var prevId=this.get("id");var prevKey=this.get("key");var newKey=acf.uniqid("field_");acf.rename({target:this.$el,search:prevId,replace:newKey});this.set("id",newKey);this.set("prevId",prevId);this.set("prevKey",prevKey);this.prop("key",newKey);this.prop("ID",0);this.$el.attr("data-key",newKey);this.$el.attr("data-id",newKey);acf.doAction("wipe_field_object",this)},move:function(){var hasChanged=function(field){return field.get("save")=="settings"};var changed=hasChanged(this);if(!changed){acf.getFieldObjects({parent:this.$el}).map(function(field){changed=hasChanged(field)||field.changed})}if(changed){alert(acf.__("This field cannot be moved until its changes have been saved"));return}var id=this.prop("ID");var field=this;var popup=false;var step1=function(){popup=acf.newPopup({title:acf.__("Move Custom Field"),loading:true,width:"300px"});var ajaxData={action:"acf/field_group/move_field",field_id:id};$.ajax({url:acf.get("ajaxurl"),data:acf.prepareForAjax(ajaxData),type:"post",dataType:"html",success:step2})};var step2=function(html){popup.loading(false);popup.content(html);popup.on("submit","form",step3)};var step3=function(e,$el){e.preventDefault();acf.startButtonLoading(popup.$(".button"));var ajaxData={action:"acf/field_group/move_field",field_id:id,field_group_id:popup.$("select").val()};$.ajax({url:acf.get("ajaxurl"),data:acf.prepareForAjax(ajaxData),type:"post",dataType:"html",success:step4})};var step4=function(html){popup.content(html);field.removeAnimate()};step1()},onChangeType:function(e,$el){if(this.changeTimeout){clearTimeout(this.changeTimeout)}this.changeTimeout=this.setTimeout(function(){this.changeType($el.val())},300)},changeType:function(newType){var prevType=this.prop("type");var prevClass=acf.strSlugify("acf-field-object-"+prevType);var newClass=acf.strSlugify("acf-field-object-"+newType);this.$el.removeClass(prevClass).addClass(newClass);this.$el.attr("data-type",newType);this.$el.data("type",newType);if(this.has("xhr")){this.get("xhr").abort()}var $tbody=this.$("> .settings > table > tbody");var $settings=$tbody.children('[data-setting="'+prevType+'"]');this.set("settings-"+prevType,$settings);$settings.detach();if(this.has("settings-"+newType)){var $newSettings=this.get("settings-"+newType);this.$setting("conditional_logic").before($newSettings);this.set("type",newType);return}var $loading=$('<tr class="acf-field"><td class="acf-label"></td><td class="acf-input"><div class="acf-loading"></div></td></tr>');this.$setting("conditional_logic").before($loading);var ajaxData={action:"acf/field_group/render_field_settings",field:this.serialize(),prefix:this.getInputName()};var xhr=$.ajax({url:acf.get("ajaxurl"),data:acf.prepareForAjax(ajaxData),type:"post",dataType:"html",context:this,success:function(html){if(!html)return;$loading.after(html);acf.doAction("append",$tbody)},complete:function(){$loading.remove();this.set("type",newType)}});this.set("xhr",xhr)},updateParent:function(){var ID=acf.get("post_id");var parent=this.getParent();if(parent){ID=parseInt(parent.prop("ID"))||parent.prop("key")}this.prop("parent",ID)}})})(jQuery);(function($,undefined){var modelId=function(type){return acf.strPascalCase(type||"")+"FieldSetting"};acf.registerFieldSetting=function(model){var proto=model.prototype;var mid=modelId(proto.type+" "+proto.name);this.models[mid]=model};acf.newFieldSetting=function(field){var type=field.get("setting")||"";var name=field.get("name")||"";var mid=modelId(type+" "+name);var model=acf.models[mid]||null;if(model===null)return false;var setting=new model(field);return setting};acf.getFieldSetting=function(field){if(field instanceof jQuery){field=acf.getField(field)}return field.setting};var settingsManager=new acf.Model({actions:{new_field:"onNewField"},onNewField:function(field){field.setting=acf.newFieldSetting(field)}});acf.FieldSetting=acf.Model.extend({field:false,type:"",name:"",wait:"ready",eventScope:".acf-field",events:{change:"render"},setup:function(field){var $field=field.$el;this.$el=$field;this.field=field;this.$fieldObject=$field.closest(".acf-field-object");this.fieldObject=acf.getFieldObject(this.$fieldObject);$.extend(this.data,field.data)},initialize:function(){this.render()},render:function(){}});var DisplayFormatFieldSetting=acf.FieldSetting.extend({type:"",name:"",render:function(){var $input=this.$('input[type="radio"]:checked');if($input.val()!="other"){this.$('input[type="text"]').val($input.val())}}});var DatePickerDisplayFormatFieldSetting=DisplayFormatFieldSetting.extend({type:"date_picker",name:"display_format"});var DatePickerReturnFormatFieldSetting=DisplayFormatFieldSetting.extend({type:"date_picker",name:"return_format"});acf.registerFieldSetting(DatePickerDisplayFormatFieldSetting);acf.registerFieldSetting(DatePickerReturnFormatFieldSetting);var DateTimePickerDisplayFormatFieldSetting=DisplayFormatFieldSetting.extend({type:"date_time_picker",name:"display_format"});var DateTimePickerReturnFormatFieldSetting=DisplayFormatFieldSetting.extend({type:"date_time_picker",name:"return_format"});acf.registerFieldSetting(DateTimePickerDisplayFormatFieldSetting);acf.registerFieldSetting(DateTimePickerReturnFormatFieldSetting);var TimePickerDisplayFormatFieldSetting=DisplayFormatFieldSetting.extend({type:"time_picker",name:"display_format"});var TimePickerReturnFormatFieldSetting=DisplayFormatFieldSetting.extend({name:"time_picker",name:"return_format"});acf.registerFieldSetting(TimePickerDisplayFormatFieldSetting);acf.registerFieldSetting(TimePickerReturnFormatFieldSetting)})(jQuery);(function($,undefined){var ConditionalLogicFieldSetting=acf.FieldSetting.extend({type:"",name:"conditional_logic",events:{"change .conditions-toggle":"onChangeToggle","click .add-conditional-group":"onClickAddGroup","focus .condition-rule-field":"onFocusField","change .condition-rule-field":"onChangeField","change .condition-rule-operator":"onChangeOperator","click .add-conditional-rule":"onClickAdd","click .remove-conditional-rule":"onClickRemove"},$rule:false,scope:function($rule){this.$rule=$rule;return this},ruleData:function(name,value){return this.$rule.data.apply(this.$rule,arguments)},$input:function(name){return this.$rule.find(".condition-rule-"+name)},$td:function(name){return this.$rule.find("td."+name)},$toggle:function(){return this.$(".conditions-toggle")},$control:function(){return this.$(".rule-groups")},$groups:function(){return this.$(".rule-group")},$rules:function(){return this.$(".rule")},open:function(){var $div=this.$control();$div.show();acf.enable($div)},close:function(){var $div=this.$control();$div.hide();acf.disable($div)},render:function(){if(this.$toggle().prop("checked")){this.renderRules();this.open()}else{this.close()}},renderRules:function(){var self=this;this.$rules().each(function(){self.renderRule($(this))})},renderRule:function($rule){this.scope($rule);this.renderField();this.renderOperator();this.renderValue()},renderField:function(){var choices=[];var validFieldTypes=[];var cid=this.fieldObject.cid;var $select=this.$input("field");acf.getFieldObjects().map(function(fieldObject){var choice={id:fieldObject.getKey(),text:fieldObject.getLabel()};if(fieldObject.cid===cid){choice.text+=acf.__("(this field)");choice.disabled=true}var conditionTypes=acf.getConditionTypes({fieldType:fieldObject.getType()});if(!conditionTypes.length){choice.disabled=true}var indents=fieldObject.getParents().length;choice.text="- ".repeat(indents)+choice.text;choices.push(choice)});if(!choices.length){choices.push({id:"",text:acf.__("No toggle fields available")})}acf.renderSelect($select,choices);this.ruleData("field",$select.val())},renderOperator:function(){if(!this.ruleData("field")){return}var $select=this.$input("operator");var val=$select.val();var choices=[];if($select.val()===null){acf.renderSelect($select,[{id:this.ruleData("operator"),text:""}])}var $field=acf.findFieldObject(this.ruleData("field"));var field=acf.getFieldObject($field);var conditionTypes=acf.getConditionTypes({fieldType:field.getType()});conditionTypes.map(function(model){choices.push({id:model.prototype.operator,text:model.prototype.label})});acf.renderSelect($select,choices);this.ruleData("operator",$select.val())},renderValue:function(){if(!this.ruleData("field")||!this.ruleData("operator")){return}var $select=this.$input("value");var $td=this.$td("value");var val=$select.val();var $field=acf.findFieldObject(this.ruleData("field"));var field=acf.getFieldObject($field);var conditionTypes=acf.getConditionTypes({fieldType:field.getType(),operator:this.ruleData("operator")});var conditionType=conditionTypes[0].prototype;var choices=conditionType.choices(field);if(choices instanceof Array){var $newSelect=$("<select></select>");acf.renderSelect($newSelect,choices)}else{var $newSelect=$(choices)}$select.detach();$td.html($newSelect);setTimeout(function(){["class","name","id"].map(function(attr){$newSelect.attr(attr,$select.attr(attr))})},0);if(!$newSelect.prop("disabled")){acf.val($newSelect,val,true)}this.ruleData("value",$newSelect.val())},onChangeToggle:function(){this.render()},onClickAddGroup:function(e,$el){this.addGroup()},addGroup:function(){var $group=this.$(".rule-group:last");var $group2=acf.duplicate($group);$group2.find("h4").text(acf.__("or"));$group2.find("tr").not(":first").remove();this.fieldObject.save()},onFocusField:function(e,$el){this.renderField()},onChangeField:function(e,$el){this.scope($el.closest(".rule"));this.ruleData("field",$el.val());this.renderOperator();this.renderValue()},onChangeOperator:function(e,$el){this.scope($el.closest(".rule"));this.ruleData("operator",$el.val());this.renderValue()},onClickAdd:function(e,$el){var $rule=acf.duplicate($el.closest(".rule"));this.renderRule($rule)},onClickRemove:function(e,$el){var $rule=$el.closest(".rule");this.fieldObject.save();if($rule.siblings(".rule").length==0){$rule.closest(".rule-group").remove()}$rule.remove()}});acf.registerFieldSetting(ConditionalLogicFieldSetting);var conditionalLogicHelper=new acf.Model({actions:{duplicate_field_objects:"onDuplicateFieldObjects"},onDuplicateFieldObjects:function(children,newField,prevField){var data={};var $selects=$();children.map(function(child){data[child.get("prevKey")]=child.get("key");$selects=$selects.add(child.$(".condition-rule-field"))});$selects.each(function(){var $select=$(this);var val=$select.val();if(!val||!data[val]){return}$select.find("option:selected").attr("value",data[val]);$select.val(data[val])})}})})(jQuery);(function($,undefined){acf.findFieldObject=function(key){return acf.findFieldObjects({key:key,limit:1})};acf.findFieldObjects=function(args){args=args||{};var selector=".acf-field-object";var $fields=false;args=acf.parseArgs(args,{id:"",key:"",type:"",limit:false,list:null,parent:false,sibling:false,child:false});if(args.id){selector+='[data-id="'+args.id+'"]'}if(args.key){selector+='[data-key="'+args.key+'"]'}if(args.type){selector+='[data-type="'+args.type+'"]'}if(args.list){$fields=args.list.children(selector)}else if(args.parent){$fields=args.parent.find(selector)}else if(args.sibling){$fields=args.sibling.siblings(selector)}else if(args.child){$fields=args.child.parents(selector)}else{$fields=$(selector)}if(args.limit){$fields=$fields.slice(0,args.limit)}return $fields};acf.getFieldObject=function($field){if(typeof $field==="string"){$field=acf.findFieldObject($field)}var field=$field.data("acf");if(!field){field=acf.newFieldObject($field)}return field};acf.getFieldObjects=function(args){var $fields=acf.findFieldObjects(args);var fields=[];$fields.each(function(){var field=acf.getFieldObject($(this));fields.push(field)});return fields};acf.newFieldObject=function($field){var field=new acf.FieldObject($field);acf.doAction("new_field_object",field);return field};var eventManager=new acf.Model({priority:5,initialize:function(){var actions=["prepare","ready","append","remove"];actions.map(function(action){this.addFieldActions(action)},this)},addFieldActions:function(action){var pluralAction=action+"_field_objects";var singleAction=action+"_field_object";var singleEvent=action+"FieldObject";var callback=function($el){var fieldObjects=acf.getFieldObjects({parent:$el});if(fieldObjects.length){var args=acf.arrayArgs(arguments);args.splice(0,1,pluralAction,fieldObjects);acf.doAction.apply(null,args)}};var pluralCallback=function(fieldObjects){var args=acf.arrayArgs(arguments);args.unshift(singleAction);fieldObjects.map(function(fieldObject){args[1]=fieldObject;acf.doAction.apply(null,args)})};var singleCallback=function(fieldObject){var args=acf.arrayArgs(arguments);args.unshift(singleAction);var variations=["type","name","key"];variations.map(function(variation){args[0]=singleAction+"/"+variation+"="+fieldObject.get(variation);acf.doAction.apply(null,args)});args.splice(0,2);fieldObject.trigger(singleEvent,args)};acf.addAction(action,callback,5);acf.addAction(pluralAction,pluralCallback,5);acf.addAction(singleAction,singleCallback,5)}});var fieldManager=new acf.Model({id:"fieldManager",events:{"submit #post":"onSubmit","mouseenter .acf-field-list":"onHoverSortable","click .add-field":"onClickAdd"},actions:{removed_field_object:"onRemovedField",sortstop_field_object:"onReorderField",delete_field_object:"onDeleteField",change_field_object_type:"onChangeFieldType",duplicate_field_object:"onDuplicateField"},onSubmit:function(e,$el){var fields=acf.getFieldObjects();fields.map(function(field){field.submit()})},setFieldMenuOrder:function(field){this.renderFields(field.$el.parent())},onHoverSortable:function(e,$el){if($el.hasClass("ui-sortable"))return;$el.sortable({handle:".acf-sortable-handle",connectWith:".acf-field-list",start:function(e,ui){var field=acf.getFieldObject(ui.item);ui.placeholder.height(ui.item.height());acf.doAction("sortstart_field_object",field,$el)},update:function(e,ui){var field=acf.getFieldObject(ui.item);acf.doAction("sortstop_field_object",field,$el)}})},onRemovedField:function(field,$list){this.renderFields($list)},onReorderField:function(field,$list){field.updateParent();this.renderFields($list)},onDeleteField:function(field){field.getFields().map(function(child){child.delete({animate:false})})},onChangeFieldType:function(field){},onDuplicateField:function(field,newField){var children=newField.getFields();if(children.length){children.map(function(child){child.wipe();child.updateParent()});acf.doAction("duplicate_field_objects",children,newField,field)}this.setFieldMenuOrder(newField)},renderFields:function($list){var fields=acf.getFieldObjects({list:$list});if(!fields.length){$list.addClass("-empty");return}$list.removeClass("-empty");fields.map(function(field,i){field.prop("menu_order",i)})},onClickAdd:function(e,$el){var $list=$el.closest(".acf-tfoot").siblings(".acf-field-list");this.addField($list)},addField:function($list){var html=$("#tmpl-acf-field").html();var $el=$(html);var prevId=$el.data("id");var newKey=acf.uniqid("field_");var $newField=acf.duplicate({target:$el,search:prevId,replace:newKey,append:function($el,$el2){$list.append($el2)}});var newField=acf.getFieldObject($newField);newField.prop("key",newKey);newField.prop("ID",0);newField.prop("label","");newField.prop("name","");$newField.attr("data-key",newKey);$newField.attr("data-id",newKey);newField.updateParent();var $label=newField.$input("label");setTimeout(function(){$label.focus()},251);newField.open();this.renderFields($list);acf.doAction("add_field_object",newField);acf.doAction("append_field_object",newField)}})})(jQuery);(function($,undefined){var locationManager=new acf.Model({id:"locationManager",wait:"ready",events:{"click .add-location-rule":"onClickAddRule","click .add-location-group":"onClickAddGroup","click .remove-location-rule":"onClickRemoveRule","change .refresh-location-rule":"onChangeRemoveRule"},initialize:function(){this.$el=$("#acf-field-group-locations")},onClickAddRule:function(e,$el){this.addRule($el.closest("tr"))},onClickRemoveRule:function(e,$el){this.removeRule($el.closest("tr"))},onChangeRemoveRule:function(e,$el){this.changeRule($el.closest("tr"))},onClickAddGroup:function(e,$el){this.addGroup()},addRule:function($tr){acf.duplicate($tr)},removeRule:function($tr){if($tr.siblings("tr").length==0){$tr.closest(".rule-group").remove()}else{$tr.remove()}},changeRule:function($rule){var $group=$rule.closest(".rule-group");var prefix=$rule.find("td.param select").attr("name").replace("[param]","");var ajaxdata={};ajaxdata.action="acf/field_group/render_location_rule";ajaxdata.rule=acf.serialize($rule,prefix);ajaxdata.rule.id=$rule.data("id");ajaxdata.rule.group=$group.data("id");acf.disable($rule.find("td.value"));$.ajax({url:acf.get("ajaxurl"),data:acf.prepareForAjax(ajaxdata),type:"post",dataType:"html",success:function(html){if(!html)return;$rule.replaceWith(html)}})},addGroup:function(){var $group=this.$(".rule-group:last");$group2=acf.duplicate($group);$group2.find("h4").text(acf.__("or"));$group2.find("tr").not(":first").remove()}})})(jQuery);(function($,undefined){var _acf=acf.getCompatibility(acf);_acf.field_group={save_field:function($field,type){type=type!==undefined?type:"settings";acf.getFieldObject($field).save(type)},delete_field:function($field,animate){animate=animate!==undefined?animate:true;acf.getFieldObject($field).delete({animate:animate})},update_field_meta:function($field,name,value){acf.getFieldObject($field).prop(name,value)},delete_field_meta:function($field,name){acf.getFieldObject($field).prop(name,null)}};_acf.field_group.field_object=acf.model.extend({type:"",o:{},$field:null,$settings:null,tag:function(tag){var type=this.type;var tags=tag.split("_");tags.splice(1,0,"field");tag=tags.join("_");if(type){tag+="/type="+type}return tag},selector:function(){var selector=".acf-field-object";var type=this.type;if(type){selector+="-"+type;selector=acf.str_replace("_","-",selector)}return selector},_add_action:function(name,callback){var model=this;acf.add_action(this.tag(name),function($field){model.set("$field",$field);model[callback].apply(model,arguments)})},_add_filter:function(name,callback){var model=this;acf.add_filter(this.tag(name),function($field){model.set("$field",$field);model[callback].apply(model,arguments)})},_add_event:function(name,callback){var model=this;var event=name.substr(0,name.indexOf(" "));var selector=name.substr(name.indexOf(" ")+1);var context=this.selector();$(document).on(event,context+" "+selector,function(e){e.$el=$(this);e.$field=e.$el.closest(".acf-field-object");model.set("$field",e.$field);model[callback].apply(model,[e])})},_set_$field:function(){this.o=this.$field.data();this.$settings=this.$field.find("> .settings > table > tbody");this.focus()},focus:function(){},setting:function(name){return this.$settings.find("> .acf-field-setting-"+name)}});var actionManager=new acf.Model({actions:{open_field_object:"onOpenFieldObject",close_field_object:"onCloseFieldObject",add_field_object:"onAddFieldObject",duplicate_field_object:"onDuplicateFieldObject",delete_field_object:"onDeleteFieldObject",change_field_object_type:"onChangeFieldObjectType",change_field_object_label:"onChangeFieldObjectLabel",change_field_object_name:"onChangeFieldObjectName",change_field_object_parent:"onChangeFieldObjectParent",sortstop_field_object:"onChangeFieldObjectParent"},onOpenFieldObject:function(field){acf.doAction("open_field",field.$el);acf.doAction("open_field/type="+field.get("type"),field.$el);acf.doAction("render_field_settings",field.$el);acf.doAction("render_field_settings/type="+field.get("type"),field.$el)},onCloseFieldObject:function(field){acf.doAction("close_field",field.$el);acf.doAction("close_field/type="+field.get("type"),field.$el)},onAddFieldObject:function(field){acf.doAction("add_field",field.$el);acf.doAction("add_field/type="+field.get("type"),field.$el)},onDuplicateFieldObject:function(field){acf.doAction("duplicate_field",field.$el);acf.doAction("duplicate_field/type="+field.get("type"),field.$el)},onDeleteFieldObject:function(field){acf.doAction("delete_field",field.$el);acf.doAction("delete_field/type="+field.get("type"),field.$el)},onChangeFieldObjectType:function(field){acf.doAction("change_field_type",field.$el);acf.doAction("change_field_type/type="+field.get("type"),field.$el);acf.doAction("render_field_settings",field.$el);acf.doAction("render_field_settings/type="+field.get("type"),field.$el)},onChangeFieldObjectLabel:function(field){acf.doAction("change_field_label",field.$el);acf.doAction("change_field_label/type="+field.get("type"),field.$el)},onChangeFieldObjectName:function(field){acf.doAction("change_field_name",field.$el);acf.doAction("change_field_name/type="+field.get("type"),field.$el)},onChangeFieldObjectParent:function(field){acf.doAction("update_field_parent",field.$el)}})})(jQuery);